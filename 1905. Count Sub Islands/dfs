class Solution {
public:
    vector<vector<int>> dircs{ {-1, 0}, {1, 0}, {0, -1}, {0, 1} };

    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int result = 0;
        int n = grid1.size();
        int m = grid1[0].size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid2[i][j] == 1 && grid1[i][j] == 0)
                    dfs(grid2, i, j);
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid2[i][j] == 1) {
                    result += 1;
                    dfs(grid2, i, j);
                }
            }
        }

        return result;
    }

     void dfs(vector<vector<int>>& grid, int row, int col) {
        int n = grid.size();
        int m = grid[0].size();
        if (row < 0 || row >= n || col < 0 || col >= m) {
            return;
        }
        if (grid[row][col] == 0)
            return;

        grid[row][col] = 0;
        for (vector<int> dirc : dircs) {
            dfs(grid, row + dirc[0], col + dirc[1]);
        }
        return;
    }
};
