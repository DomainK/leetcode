class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int result = 10000;
        sort(nums.begin(), nums.end());
        for(int left = 0; left < nums.size(); ++left){
            if(left > 0 && nums[left] == nums[left - 1])
                continue;
            int right = nums.size() - 1;
            int targetTmp = target - nums[left];
            for(int mid = left + 1; mid < nums.size() - 1; ++mid){
                if(mid > left + 1 && nums[mid] == nums[mid - 1])
                    continue;
                while(mid < right && nums[mid] + nums[right] > targetTmp){
                    right--;
                }
                if(mid != right && nums[mid] + nums[right] == targetTmp)
                    return target;
                if(mid == right){
                    if(abs(result - target) >= abs(nums[left] + nums[mid] + nums[right + 1] - target))
                        result = nums[left] + nums[mid] + nums[right + 1];
                    break;
                }
                if(nums[mid] + nums[right] < targetTmp){
                    if(right == nums.size() - 1 || 2 * nums[mid] + nums[right] + nums[right + 1] - 2 * targetTmp > 0){
                        if(abs(result - target) >= abs(nums[left] + nums[mid] + nums[right] - target))
                            result = nums[left] + nums[mid] + nums[right];
                    }else if(2 * nums[mid] + nums[right] + nums[right + 1] - 2 * targetTmp <= 0)
                        if(abs(result - target) >= abs(nums[left] + nums[mid] + nums[right + 1] - target)){
                            result = nums[left] + nums[mid] + nums[right + 1];
                        }
                }
            }
        }
        return result;
    }
};
