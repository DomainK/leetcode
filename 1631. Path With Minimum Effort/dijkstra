class State {
public:
    int x, y;
    int distFromStart;

    State(const int ix, const int iy, const int d) :x(ix), y(iy), distFromStart(d) {};
};

struct cmp {
    bool operator()(const State& x1, const State& x2) {
        return x1.distFromStart > x2.distFromStart;
    }
};

class Solution {
public:
    static constexpr int dirc[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    int minimumEffortPath(vector<vector<int>>& heights) {
        return djikstra(heights);
    }

    int djikstra(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();
        vector<vector<int>> minDist(n, vector<int>(m, INT_MAX));
        minDist[0][0] = 0;
        priority_queue<State, vector<State>, cmp> priQue;
        priQue.push(State(0, 0, 0));
        while (!priQue.empty()) {
            State curState = priQue.top();
            priQue.pop();
            int x = curState.x;
            int y = curState.y;
            int distFromStart = curState.distFromStart;

            if (x == n - 1 && y == m - 1)
                return distFromStart;

            if (distFromStart > minDist[x][y])
                continue;

            for (int i = 0; i <= 3; i++) {
                int xNext = x + dirc[i][0];
                int yNext = y + dirc[i][1];
                if (xNext < 0 || xNext >= n || yNext < 0 || yNext >= m)
                    continue;
                int distNext = max(abs(heights[xNext][yNext] - heights[x][y]), minDist[x][y]);
                if (distNext < minDist[xNext][yNext]) {
                    minDist[xNext][yNext] = distNext;
                    priQue.push(State(xNext, yNext, distNext));
                }
            }
        }

        return -1;
    }
};
