class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        if(k > n / 2)
            return maxProfitInf(prices);
        return maxProfitK(prices, k);
    }

    int maxProfitInf(vector<int>& prices){
        int n = prices.size();
        int dp0 = 0;
        int dp1 = -prices[0];
        for(int i = 0; i < n; i++){
            int tmp = dp0;
            dp0 = max(tmp, dp1 + prices[i]);
            dp1 = max(tmp - prices[i], dp1);
        }
        return dp0;
    }

    int maxProfitK(vector<int>& prices, int k){
        int n = prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(k + 1, vector<int>(2)));
        for(int j = 0; j < k + 1; j++){
            dp[0][j][0] = 0;
            dp[0][j][1] = -prices[0];
        }

        for(int i = 1; i < n; i++){
            for(int j = k; j >= 1; j--){
                dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i]);
                dp[i][j][1] = max(dp[i - 1][j - 1][0] - prices[i], dp[i - 1][j][1]);
            }
        }
        return dp[n - 1][k][0];
    }
};
