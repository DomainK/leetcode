class Solution {
public:
    vector<vector<int>> neigh{
        {1, 3},{0, 2, 4}, {1,5},
        {0,4},{1,3,5},{2, 4}
    };

    int slidingPuzzle(vector<vector<int>>& board) {
        int n = board.size();
        int m = board[0].size();

        string start;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m;j++){
                start.push_back('0' + board[i][j]);
            }
        }

        queue<string> que;
        unordered_set<string> visited;
        string target = "123450";

        if(start == target)
            return 0;

        que.push(start);
        visited.insert(start);
        int step = 1;
        while(!que.empty()){
            int sz = que.size();
            for(int i = 0; i < sz; i++){
                string current(que.front());
                que.pop();
                int zeroPos = find(current.begin(), current.end(), '0') - current.begin();
                for(int neighbor : neigh[zeroPos]){
                    string tmp(current);
                    swap(tmp[zeroPos], tmp[neighbor]);
                    if(tmp == target)
                        return step;
                    if(visited.find(tmp) == visited.end()){
                        visited.insert(tmp);
                        que.push(tmp);
                    }
                }
            }
            step++;
        }
        return -1;
    }
};
