struct cmp {
    bool operator()(const vector<int> x, const vector<int> y) {
        return x[2] < y[2];
    }
};

class UnionFind {
private:
	// 连通分量个数
	int count;
	// 节点x的父节点为parent[x]
	vector<int> parent;

public:
	// 构造函数
	UnionFind(int n) {
		this->count = n;
		this->parent.resize(n);

		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
	}

	// 连通两个节点
	void unionTwo(int x1, int x2) {
		int root1 = find(x1);
		int root2 = find(x2);
		if (root1 == root2)
			return;
		parent[root1] = root2;
		count--;
	}
	// 判断是否连通
	bool connected(int x1, int x2) {
		int root1 = find(x1);
		int root2 = find(x2);
		return root1 == root2;
	}

	// 返回根节点
	int find(int x) {
		if (parent[x] != x)
			parent[x] = find(parent[x]);
		return parent[x];
	}

	// 返回当前的连接分量个数
	int size() {
		return count;
	}
};


class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size();
        vector<vector<int>> edges;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                edges.push_back(vector<int>{i, j,
                    abs(points[i][0] - points[j][0]) +
                    abs(points[i][1] - points[j][1])});
            }
        }
        sort(edges.begin(), edges.end(), cmp());

        UnionFind uf(n);
        int mst = 0;
        for (vector<int> edge : edges) {
            if (uf.connected(edge[0], edge[1])) {
                continue;
            }
            mst += edge[2];
            uf.unionTwo(edge[0], edge[1]);
        }

        return mst;
    }
};
