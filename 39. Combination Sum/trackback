class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> combination;
        forceRecursion(candidates, result, combination, target, 0);

        return result;
    }

    void forceRecursion(const vector<int>& candidates, vector<vector<int>>& result, vector<int> combination, int target, int start){
        if(accumulate(combination.begin(), combination.end(), 0) == target){
            result.push_back(combination);
            return;
        }

        for(int i = start; i < candidates.size(); i++){
            if(accumulate(combination.begin(), combination.end(), candidates[i]) <= target){
                combination.push_back(candidates[i]);
                forceRecursion(candidates, result, combination, target, i);
                combination.pop_back();
            }
        }

        return;
    }
};
