class Solution {
public:
    vector<int> tmp;
    int count;

    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        tmp.resize(n);
        vector<int> arr;
        MergeSort(nums, 0, n - 1);
        return count;
    }

    void MergeSort(vector<int>& nums, int left, int right) {
        if (left == right)
            return;
        int mid = left + (right - left) / 2;
        MergeSort(nums, left, mid);
        MergeSort(nums, mid + 1, right);
        merge(nums, left, mid, right);
    }

    void merge(vector<int>& nums, int left, int mid, int right) {
        for (int i = left; i <= right; i++)
            tmp[i] = nums[i];

        int end = mid + 1;
        for (int i = left; i <= mid; i++) {
            while (end <= right && (long)nums[i] > (long)nums[end] * 2)
                end++;
            count += end - mid - 1;
        }

        int ptr1 = left, ptr2 = mid + 1;
        for (int p = ptr1; p <= right; p++) {
            if (ptr1 == mid + 1) {
                nums[p] = tmp[ptr2++];
            }
            else if (ptr2 == right + 1) {
                nums[p] = tmp[ptr1++];
            }
            else if (tmp[ptr1] > tmp[ptr2])
                nums[p] = tmp[ptr2++];
            else {
                nums[p] = tmp[ptr1++];
            }
        }
    }
};
