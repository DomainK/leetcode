class RandomizedSet {
private:
    vector<int> nums;
    unordered_map<int, int> valToIndex;

public:

    RandomizedSet() {
        srand((unsigned)time(NULL));
    }

    bool insert(int val) {
        if (valToIndex.count(val))
            return false;

        nums.push_back(val);
        valToIndex[val] = nums.size() - 1;
        return true;
    }

    bool remove(int val) {
        if (!valToIndex.count(val))
            return false;
        int idx = valToIndex[val];
        valToIndex[nums[nums.size() - 1]] = idx;
        swap(nums[idx], nums[nums.size() - 1]);
        nums.pop_back();
        valToIndex.erase(val);
        return true;
    }

    int getRandom() {
        return nums[rand() % nums.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
