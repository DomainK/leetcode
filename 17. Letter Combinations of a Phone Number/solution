class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> result;
        if(digits.empty())
            return result;
        const unordered_map<char, string> hashtable{
            {'2', "abc"}, {'3', "def"}, {'4', "ghi"},
            {'5', "jkl"}, {'6', "mno"}, {'7', "pqrs"},
            {'8', "tuv"}, {'9', "wxyz"}
        };

        string combination;
        backtarck(digits, hashtable, result, combination, 0);
        return result;
    }

    void backtarck(const string& digits, const unordered_map<char, string>& hashtable, vector<string>& result, string& combination, int index){
        if(index == digits.size())
            result.push_back(combination);
        else{
            const string phoneAlpha = hashtable.at(digits[index]);
            for(auto alpha : phoneAlpha){
                combination.push_back(alpha);
                backtarck(digits, hashtable, result, combination, index + 1);
                combination.pop_back();
            }
        }
    }
};
