class Solution {
public:
    bool isValid;
    vector<bool> isVisited;
    vector<bool> color;

    bool isBipartite(vector<vector<int>>& graph) {
        isValid = true;
        isVisited.resize(graph.size(), false);
        color.resize(graph.size());

        for (int cur = 0; cur < graph.size(); cur++) {
            if (!isVisited[cur]) {
                traverse(graph, cur);
            }
        }

        return isValid;
    }

    void traverse(vector<vector<int>>& graph, int cur) {
        isVisited[cur] = true;
        queue<int> que;
        que.push(cur);

        while (!que.empty() && isValid) {
            int q = que.front();
            que.pop();
            for (int next : graph[q]) {
                if (!isVisited[next]) {
                    color[next] = !color[q];
                    isVisited[next] = true;
                    que.push(next);
                }
                else {
                    if (color[next] == color[q])
                        isValid = false;
                }
            }
        }
    }
};
