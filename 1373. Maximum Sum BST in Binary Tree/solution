/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int result = 0;
public:
    int maxSumBST(TreeNode* root) {
        traverse(root);
        return result;
    }

    vector<int> traverse(TreeNode* root) {
        if (root == nullptr)
            return vector<int>{1, INT_MIN, INT_MAX, 0};

        vector<int> leftInfo = traverse(root->left);
        vector<int> rightInfo = traverse(root->right);
        
        vector<int> thisInfo(4);
        if (leftInfo[0] == 1 && rightInfo[0] == 1
            && root->val > leftInfo[1] && root->val < rightInfo[2]) {
            thisInfo[0] = 1;
            thisInfo[1] = max(rightInfo[1], root->val);
            thisInfo[2] = min(leftInfo[2], root->val);
            thisInfo[3] = root->val + leftInfo[3] + rightInfo[3];
            result = max(thisInfo[3], result);
        }
        return thisInfo;
    }
};
