class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        return divide(nums, 0, nums.size() - 1).mSum;
    }

    struct info {
        int lSum, rSum, sSum, mSum;
    };

    info pushUp(info left, info right) {
        int sSum = left.sSum + right.sSum;
        int lSum = max(left.lSum, left.sSum + right.lSum);
        int rSum = max(right.rSum, left.rSum + right.sSum);
        int mSum = max(max(left.mSum, right.mSum), left.rSum + right.lSum);
        return info{ lSum, rSum, sSum, mSum };
    }

    info divide(vector<int>& nums, int left, int right) {
        int mid = (left + right) >> 1;
        if (left == right)
            return info{ nums[left], nums[left], nums[left], nums[left] };
        info leftInfo = divide(nums, left, mid);
        info rightInfo = divide(nums, mid + 1, right);
        return pushUp(leftInfo, rightInfo);
    }
};
