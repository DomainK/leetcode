class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        vector<vector<vector<int>>> graph(2, vector<vector<int>>(n));
        vector<vector<int>> result(2, vector<int>(n, INT_MAX));
        for (auto& r : redEdges)
            graph[0][r[0]].emplace_back(r[1]);
        for (auto& b : blueEdges)
            graph[1][b[0]].emplace_back(b[1]);
        queue<pair<int, int>> que;
        result[0][0] = 0;
        result[1][0] = 0;
        que.push({ 0, 0 });
        que.push({ 0, 1 });
        while (!que.empty()) {
            auto [next, col] = que.front();
            que.pop();
            for (auto path : graph[1 - col][next]) {
                if (result[1 - col][path] != INT_MAX)
                    continue;
                result[1 - col][path] = result[col][next] + 1;
                que.push({ path, 1 - col });
            }
        }

        for (int i = 0; i < n; i++) {
            result[0][i] = min(result[0][i], result[1][i]);
            if (result[0][i] == INT_MAX)
                result[0][i] = -1;
        }

        return result[0];
    }
};
