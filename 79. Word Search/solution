class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int row = board.size();
        int col = board[0].size();
        vector<vector<int>> visited(row, vector<int>(col));

        for (int i = 0; i < row; ++i) {
            for (int j = 0; j < col; ++j) {
                bool flag = search(board, visited, i, j, word, 0);
                if (flag)
                    return true;
            }
        }
        return false;
    }

    bool search(vector<vector<char>>& board, vector<vector<int>>& visited, int row, int col, string& word, int k) {
        if (board[row][col] != word[k])
            return false;
        else if (k == word.size() - 1)
            return true;
        visited[row][col] = true;
        vector<pair<int, int>> paths{ {0,1},{0,-1},{1,0},{-1,0} };
        bool result = false;

        for (const auto& path : paths) {
            int nextRow = row + path.first, nextCol = col + path.second;
            if (nextRow >= 0 && nextRow < board.size() && nextCol >= 0 && nextCol < board[0].size()) {
                if (!visited[nextRow][nextCol]) {
                    bool flag = search(board, visited, nextRow, nextCol, word, k + 1);
                    if (flag) {
                        result = true;
                        break;
                    }
                }
            }
        }
        visited[row][col] = false;

        return result;
    }
};
