class Solution {
public:
    vector<long> tmp;
    int count = 0;
    int lower;
    int upper;

    int countRangeSum(vector<int>& nums, int lower, int upper) {
        this->lower = lower;
        this->upper = upper;
        int n = nums.size();
        tmp.resize(n + 1);
        vector<long> preSum(n + 1, 0);
        for (int i = 0; i < n; i++)
            preSum[i + 1] = (long)nums[i] + preSum[i];
        MergeSort(preSum, 0, n);
        return count;
    }

    void MergeSort(vector<long>& nums, int left, int right) {
        if (left == right)
            return;
        int mid = left + (right - left) / 2;
        MergeSort(nums, left, mid);
        MergeSort(nums, mid + 1, right);
        merge(nums, left, mid, right);
    }

    void merge(vector<long>& nums, int left, int mid, int right) {
        for (int i = left; i <= right; i++)
            tmp[i] = nums[i];

        int start = mid + 1, end = mid + 1;
        for (int i = left; i <= mid; i++) {
            while (start <= right && nums[start] - nums[i] < lower)
                start++;
            while (end <= right && nums[end] - nums[i] <= upper)
                end++;
            count += end - start;
        }

        int ptr1 = left, ptr2 = mid + 1;
        for (int p = ptr1; p <= right; p++) {
            if (ptr1 == mid + 1) {
                nums[p] = tmp[ptr2++];
            }
            else if (ptr2 == right + 1) {
                nums[p] = tmp[ptr1++];
            }
            else if (tmp[ptr1] > tmp[ptr2])
                nums[p] = tmp[ptr2++];
            else {
                nums[p] = tmp[ptr1++];
            }
        }
    }
};
