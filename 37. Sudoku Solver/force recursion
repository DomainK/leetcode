class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        vector<unordered_set<char>> threeMetrix(9);
        vector<unordered_set<char>> colSet(9);
        vector<unordered_set<char>> rowSet(9);

        for(int i = 0; i < board.size(); i++)
            for(int j = 0; j < board[0].size(); ++j){
                if(board[i][j] == '.')
                    continue;
                else{
                    rowSet[i].insert(board[i][j]);
                    colSet[j].insert(board[i][j]);
                    threeMetrix[(i / 3) * 3 + (j / 3)].insert(board[i][j]);
                }
            }

        forceRecursion(board, 0, 0, threeMetrix, colSet, rowSet, false);
    }

    bool forceRecursion(vector<vector<char>>& board, int i, int j, vector<unordered_set<char>>& threeMetrix, vector<unordered_set<char>>& colSet, vector<unordered_set<char>>& rowSet, bool isFind){
        if(j > 8){
            j = 0;
            i++;
        }
        if(i > 8){
            isFind = true;
            return isFind;
        }
        if(board[i][j] == '.'){
            for(char num = '1'; num <= '9'; ++num){
                if(isValid(board, i, j, threeMetrix, colSet, rowSet, num)){
                    board[i][j] = num;
                    rowSet[i].insert(num);
                    colSet[j].insert(num);
                    threeMetrix[(i / 3) * 3 + (j / 3)].insert(num);
                    isFind = forceRecursion(board, i, j + 1, threeMetrix, colSet, rowSet, isFind);
                    if(!isFind){
                        rowSet[i].erase(board[i][j]);
                        colSet[j].erase(board[i][j]);
                        threeMetrix[(i / 3) * 3 + (j / 3)].erase(board[i][j]);
                        board[i][j] = '.';
                    }else
                        break;
                }
            }
        }else
            isFind = forceRecursion(board, i, j + 1, threeMetrix, colSet, rowSet, isFind);
    
        return isFind;
    }
    
    bool isValid(vector<vector<char>>& board, int i, int j, vector<unordered_set<char>>& threeMetrix, vector<unordered_set<char>>& colSet, vector<unordered_set<char>>& rowSet, char num){
        if(rowSet[i].find(num) != rowSet[i].end()){
            return false;
        }
        if(colSet[j].find(num) != colSet[j].end()){
            return false;
        }
        if(threeMetrix[(i / 3) * 3 + (j / 3)].find(num) != threeMetrix[(i / 3) * 3 + (j / 3)].end()){
            return false;
        }
        return true;
    }
};
