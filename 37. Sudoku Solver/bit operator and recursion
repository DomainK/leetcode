class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        int reset = 0x01ff;
        vector<int> rowSet(9, reset);
        vector<int> colSet(9, reset);
        vector<int> threeMatrix(9, reset);

        for(int i = 0; i < board.size(); i++)
            for(int j = 0; j < board[0].size(); ++j){
                if(board[i][j] == '.')
                    continue;
                else{
                    rowSet[i] ^= 1 << int(board[i][j] - '1');
                    colSet[j] ^= 1 << int(board[i][j] - '1');
                    threeMatrix[(i / 3) * 3 + (j / 3)] ^= 1 << int(board[i][j] - '1');
                }
            }
        
        bool isChanged = false;
        do{
            isChanged = false;
            for(int i = 0; i < board.size(); i++)
                for(int j = 0; j < board[0].size(); ++j)
                    if(board[i][j] == '.'){
                        int tmp = rowSet[i] & colSet[j] & threeMatrix[(i / 3) * 3 + (j / 3)];
                        if((tmp != 0 && tmp ^ (tmp & (-tmp))) == 0){
                            isChanged = true;
                            int count = addNum(board[i][j], tmp);
                            rowSet[i] ^= count;
                            colSet[j] ^= count;
                            threeMatrix[(i / 3) * 3 + (j / 3)] ^= count;
                        }
                    }
        }while(isChanged);

        forceRecursion(board, 0, 0, threeMatrix, colSet, rowSet, false);
    }

    bool forceRecursion(vector<vector<char>>& board, int i, int j, vector<int>& threeMatrix, vector<int>& colSet, vector<int>& rowSet, bool isFind){
        if(j > 8){
            j = 0;
            i++;
        }
        if(i > 8){
            isFind = true;
            return isFind;
        }
        if(board[i][j] == '.'){
            for(int num = 1; num <= 0x0100; num = num << 1){
                if(isValid(i, j, threeMatrix, colSet, rowSet, num)){
                    int count = addNum(board[i][j], num);
                    rowSet[i] ^= count;
                    colSet[j] ^= count;
                    threeMatrix[(i / 3) * 3 + (j / 3)] ^= count;
                    isFind = forceRecursion(board, i, j + 1, threeMatrix, colSet, rowSet, isFind);
                    if(!isFind){
                        rowSet[i] ^= count;
                        colSet[j] ^= count;
                        threeMatrix[(i / 3) * 3 + (j / 3)] ^= count;
                        board[i][j] = '.';
                    }else
                        break;
                }
            }
        }else
            isFind = forceRecursion(board, i, j + 1, threeMatrix, colSet, rowSet, isFind);
    
        return isFind;
    }

    bool isValid(int i, int j, vector<int>& threeMatrix, vector<int>& colSet, vector<int>& rowSet, int num){
        return num == (num & threeMatrix[(i / 3) * 3 + (j / 3)] & colSet[j] & rowSet[i]);
    }

    int addNum(char& board, int num){
        int count = 0;
        while(num != 1){
            num = num >> 1;
            count++;
        }
        board = '1' + count;

        return 1 << count;
    }
};
