class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));

        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j)
                if(obstacleGrid[i][j] == 1)
                    dp[i][j] = -1;
        }

        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(dp[i][j] == -1)
                    continue;
                if(i == 0 && j == 0)
                    dp[i][j] = 1;
                else if(i == 0){
                    dp[i][j] = dp[i][j - 1];
                }
                else if(j == 0){
                    dp[i][j] = dp[i - 1][j];
                }
                else{
                    if(dp[i - 1][j] == -1)
                        dp[i][j] = dp[i][j - 1];
                    else if(dp[i][j - 1] == -1)
                        dp[i][j] = dp[i - 1][j];
                    else
                        dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                }
            }
        }

        return dp[m - 1][n - 1] == -1 ? 0 : dp[m - 1][n - 1];
    }
};
