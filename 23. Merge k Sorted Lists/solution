/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return divide(lists, 0, lists.size() - 1);
    }

    ListNode* divide(vector<ListNode*>& lists, int left, int right){
        if(left == right)
            return lists[left];
        else if(left > right)
            return nullptr;
        else{
            int mid = left + ((right - left) >> 2);
            return mergeTwoLists(divide(lists, left, mid), divide(lists, mid + 1, right));
        }
    }

    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2){
        if(list1 == nullptr)
            return list2;
        else if(list2 == nullptr)
            return list1;
        else if(list1->val < list2->val){
            list1->next = mergeTwoLists(list1->next, list2);
            return list1;
        }else{
            list2->next = mergeTwoLists(list1, list2->next);
            return list2;
        }
    }
};
