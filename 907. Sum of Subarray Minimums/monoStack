class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();

        vector<int> monoStack;
        vector<int> left(n);
        vector<int> right(n);

        for(int i = 0; i < n; i++){
            while(!monoStack.empty() && arr[monoStack.back()] >= arr[i]){
                monoStack.pop_back();
            }
            left[i] = i - (monoStack.empty()? -1 : monoStack.back());
            monoStack.push_back(i);
        }
        monoStack.clear();
        for(int i = n - 1; i >= 0; i--){
            while(!monoStack.empty() && arr[monoStack.back()] > arr[i]){
                monoStack.pop_back();
            }
            right[i] = (monoStack.empty()? n : monoStack.back()) - i;
            monoStack.push_back(i);
        }

        long long result = 0;
        long long md = 1e9 + 7;
        for(int i = 0; i < n; i++){
            result += (long long)left[i] * (long long)right[i] * (long long)arr[i];
        }
        result = result % md;

        return result;
    }
};
