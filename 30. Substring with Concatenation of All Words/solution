class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        int strLength = s.size();
        int vecLength = words.size();
        int wdLength = words[0].size();
        vector<int> result;
        if(strLength < vecLength * wdLength)
            return result;

        unordered_map<string, int> wordMap;
        unordered_map<string, int> findMap;
        for(auto str : words){
            wordMap[str] += 1;
        }

        int left = 0;
        while(true){
            bool isFind = true;
            if(left + vecLength * wdLength - 1 >= strLength)
                break;

            for(int i = 0; i < vecLength; ++i){
                string tmp;
                tmp.assign(s, left + i * wdLength, wdLength);
                if(wordMap.find(tmp) == wordMap.end() || findMap[tmp] > wordMap[tmp] - 1){
                    isFind = false;
                    findMap.clear();
                    break;
                }
                findMap[tmp] += 1;
            }
            findMap.clear();
            if(isFind)
                result.push_back(left);
            left += 1;
        }
        return result;
    }
};
