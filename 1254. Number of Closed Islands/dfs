class Solution {
public:
    vector<vector<int>> dircs{ {-1, 0}, {1, 0}, {0, -1}, {0, 1} };

    int closedIsland(vector<vector<int>>& grid) {
        int result = 0;
        int n = grid.size();
        int m = grid[0].size();
        for (int i = 0; i < n; i++) {
            dfs(grid, i, 0);
            dfs(grid, i, m - 1);
        }
        for (int j = 0; j < m; j++) {
            dfs(grid, 0, j);
            dfs(grid, n - 1, j);
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 0)
                    result += 1;
                dfs(grid, i, j);
            }
        }
        return result;
    }

    void dfs(vector<vector<int>>& grid, int row, int col) {
        int n = grid.size();
        int m = grid[0].size();
        if (row < 0 || row >= n || col < 0 || col >= m) {
            return;
        }
        if (grid[row][col] == 1)
            return;

        grid[row][col] = 1;
        for (vector<int> dirc : dircs) {
            dfs(grid, row + dirc[0], col + dirc[1]);
        }
    }
};
