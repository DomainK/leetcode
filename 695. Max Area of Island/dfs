class Solution {
public:
    vector<vector<int>> dircs{ {-1, 0}, {1, 0}, {0, -1}, {0, 1} };

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int result = 0;
        int n = grid.size();
        int m = grid[0].size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1)
                    result = max(result, dfs(grid, i, j));
            }
        }
        return result;
    }

    int dfs(vector<vector<int>>& grid, int row, int col) {
        int n = grid.size();
        int m = grid[0].size();
        int result = 0;
        if (row < 0 || row >= n || col < 0 || col >= m) {
            return 0;
        }
        if (grid[row][col] == 0)
            return 0;

        grid[row][col] = 0;
        result += 1;
        for (vector<int> dirc : dircs) {
            result += dfs(grid, row + dirc[0], col + dirc[1]);
        }
        return result;
    }
};
