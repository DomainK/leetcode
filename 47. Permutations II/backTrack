class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> cmn;
        sort(nums.begin(), nums.end());
        unordered_set<int> hashSet;
        trackback(result, nums, cmn, 0, nums.size(), hashSet);

        return result;
    }

    void trackback(vector<vector<int>>& result, const vector<int>& nums, vector<int>& cmn, int index, int length, unordered_set<int>& hashSet){
        if(index == length){
            result.push_back(cmn);
            return;
        }
        for(int i = 0; i < length; ++i){
            if(hashSet.find(i) != hashSet.end() || (i > 0 && nums[i] == nums[i - 1] && hashSet.find(i - 1) == hashSet.end()))
                continue;
            
            cmn.push_back(nums[i]);
            hashSet.emplace(i);
            trackback(result, nums, cmn, index + 1, length, hashSet);
            cmn.pop_back();
            hashSet.erase(i);
        }
    }
};
