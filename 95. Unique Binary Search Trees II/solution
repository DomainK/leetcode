/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if (n == 0)
            return vector<TreeNode*>{};
        return build(1, n);
    }

    vector<TreeNode*> build(int left, int right) {
        vector<TreeNode*> result;
        if (left > right) {
            result.push_back(nullptr);
            return result;
        }

        for (int mid = left; mid <= right; mid++) {
            vector<TreeNode*> leftComs = build(left, mid - 1);
            vector<TreeNode*> rightComs = build(mid + 1, right);
            for (auto leftCom : leftComs) {
                for (auto rightCom : rightComs) {
                    TreeNode* cur = new TreeNode(mid, leftCom, rightCom);
                    result.push_back(cur);
                }
            }
        }

        return result;
    }
};
