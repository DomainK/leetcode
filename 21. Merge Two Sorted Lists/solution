/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* ptr1 = list1;
        ListNode* ptr2 = list2;
        ListNode* result = nullptr;
        queue<ListNode*> qe;

        while(ptr1 != nullptr && ptr2 != nullptr){
            if(ptr1->val > ptr2->val){
                qe.push(ptr2);
                ptr2 = ptr2->next;
            }else{
                qe.push(ptr1);
                ptr1 = ptr1->next;
            }
        }
        if(ptr1 == nullptr && ptr2 != nullptr){
            qe.push(ptr2);
        }
        if(ptr2 == nullptr && ptr1 != nullptr){
            qe.push(ptr1);
        }
        if(!qe.empty()){
            result = qe.front();
            ListNode* tmp = result;
            qe.pop();
            while(!qe.empty()){
                tmp->next = qe.front();
                tmp = tmp->next;
                qe.pop();
            }
        }
        return result;   
    }
};
