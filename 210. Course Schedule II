class Solution {
private:
    vector<bool> visited;
    vector<bool> onPath;
    bool hasCycle = false;
    vector<int> postOrder;
public:
    vector<list<int>> buildGraph(int numCourses, vector<vector<int>>& prerequisites) {
        vector<list<int>> graph(numCourses);
        for (vector<int> edge : prerequisites) {
            graph[edge[1]].push_back(edge[0]);
        }

        return graph;
    }

    void traverse(vector<list<int>>& graph, int cur) {
        if (onPath[cur]) {
            hasCycle = true;
        }

        if (visited[cur] || hasCycle)
            return;
        
        visited[cur] = true;
        onPath[cur] = true;
        for (int next : graph[cur])
            traverse(graph, next);
        postOrder.push_back(cur);
        onPath[cur] = false;
    }

    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        visited.resize(numCourses);
        onPath.resize(numCourses);

        vector<list<int>> graph = buildGraph(numCourses, prerequisites);

        for (int i = 0; i < numCourses; i++)
            traverse(graph, i);

        if(hasCycle)
            return vector<int>{};
        
        reverse(postOrder.begin(), postOrder.end());
        return postOrder;
    }
};
