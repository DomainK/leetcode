class Solution {
public:
    unordered_map<char, list<int>> charToIdx;
    vector<vector<int>> memo;

    int findRotateSteps(string ring, string key) {
        int m = ring.size();
        int n = key.size();

        memo.resize(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++){
            charToIdx[ring[i]].push_back(i);
        }

        return dp(ring, 0, key, 0);
    }

    int dp(string ring, int i, string key, int j){
        if(j == key.size())
            return 0;
        if(memo[i][j] != 0)
            return memo[i][j];

        int result = INT_MAX;
        int n = ring.size();

        for(auto next : charToIdx[key[j]]){
            int distance = abs(i - next);
            int minDis = min(distance, n - distance);
            int subProblem = dp(ring, next, key, j + 1);
            result = min(result, 1 + minDis + subProblem);
        }
        memo[i][j] = result;

        return memo[i][j];
    }
};
